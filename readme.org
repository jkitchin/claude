#+title: Claude light
#+author: John Kitchin

This repository contains the app code to run a claude-light server and to interact with it through Python.

#+BEGIN_HTML
<a href="https://github.com/jkitchin/claude-light/actions/workflows/online.yaml"><img src="https://github.com/jkitchin/claude-light/actions/workflows/online.yaml/badge.svg"></a>
#+END_HTML

* Usage

Welcome to Claude-Light! You can use this instrument to learn about running remote experiments, analyzing data, automation, design of experiments, and more.

The instrument is hosted at http://claude-light.cheme.cmu.edu:5000. That url brings you to this page (which is hosted on GitHUB). See [[*Parts list]] for details on the instrument hardware.

The following sections describe several ways you can interact with Claude Light.

** The Green machine

The entry level instrument is hosted at:
http://claude-light.cheme.cmu.edu:5000/gm

Here you will see a web-form where you can enter the Green LED level, and get a measurement of the 515nm light level, and a picture of the LED during the measurement.

There is only one input, and one output in this machine. This instrument can be used to illustrate reproducibility and statistics, linear regression, optimization and design of experiments.

*** Recommended exercises

Here are some exercises you could try:

1. How reproducible is a particular setting? Try running the same experiment many times. Record each result. Make a histogram of the results, and compute statistics like the mean and standard deviation.
2. How does your measurement change during the day? The color sensor is exposed to ambient light which changes throughout the day. Experiment with measuring the background with G=0 and subtracting that from your data.
3. How does the output depend on the input setting? Run experiments at a variety of green levels and plot how the output depends on those levels. It should look approximately linear. Try fitting a line to the data.
4. Find the input setting that yields an output of 25000 (or other value of your choice).

** The RGB machine

The RGB machine has three inputs. You can access it at
http://claude-light.cheme.cmu.edu:5000/rgb

The output includes 8 wavelengths of light, and two additional outputs for the total intensity (clear) and near-IR (nir), as well as a picture of the LED during the experiment.

*** Recommended exercises

1. Reproducibility across the output channels. Repeat a measurement many times, and copy the data into a spreadsheet. Compute the mean and standard deviations for each channel and compare the results.
2. Vary one input, and plot how the outputs depend on it. 

** The API endpoint

The API endpoint is intended for scripting. You can access it at http://claude-light.cheme.cmu.edu:5000/api. 

This returns simple json with input and output. You can pass R, B and B levels as url params, e.g.

http://claude-light.cheme.cmu.edu:5000/api?R=0.1&G=0.3&B=0.2


Here is an API example with curl. You could process this by using jq in a shell if desired.

#+BEGIN_SRC sh :results output
curl "http://claude-light.cheme.cmu.edu:5000/api?R=0.12&G=0.45&B=1" 
#+END_SRC

#+RESULTS:
: {"in":[0.12,0.45,1.0],"out":{"415nm":2483,"445nm":31854,"480nm":15715,"515nm":31083,"555nm":9082,"590nm":7059,"630nm":10611,"680nm":4844,"clear":65535,"nir":13854}}

Here is an example where we extract the Green channel at 515nm. 

#+BEGIN_SRC sh 
curl -s "http://claude-light.cheme.cmu.edu:5000/api?R=0.12&G=0.45&B=1" | jq -M '.out."515nm"' 
#+END_SRC

#+RESULTS:
: 31215

Here is an example with Python. You can use this in a Jupyter notebook, for example.

#+BEGIN_SRC python :results output
import requests
resp = requests.get('http://claude-light.cheme.cmu.edu:5000/api',
                    params={'R': 0.12, 'G':0.45, 'B': 1})
print(resp.json())
#+END_SRC

#+RESULTS:
: {'in': [0.12, 0.45, 1.0], 'out': {'415nm': 2500, '445nm': 31871, '480nm': 15816, '515nm': 31510, '555nm': 9174, '590nm': 7187, '630nm': 10831, '680nm': 4912, 'clear': 65535, 'nir': 13986}}

*** Recommended exercises

1. Write a Python script that loops over a range of input values. Save the output in each iteration. Make a plot showing how the output depends on the inputs.
2. Write a Python script to repeat a measurement many times. Accumulate the results. Plot a histogram of the results, and compute some statistical properties of them.

** The Python interface

See https://github.com/jkitchin/claude-light-python for a Python package you can install to control and automate Claude.

* About

Claude Light is a simple instrument inspired by the work of Sterling Baird and Taylor Sparks in these papers:

- Baird, S. G., & Sparks, T. D. (2022). What is a minimal working example for a
  self-driving laboratory? Matter, 5(12), 4170â€“4178.
  http://dx.doi.org/10.1016/j.matt.2022.11.007

- Baird, S. G., & Sparks, T. D. (2023). Building a "Hello World" for
  self-driving labs: the closed-loop spectroscopy lab light-mixing demo. STAR
  Protocols, 4(2), 102329. http://dx.doi.org/10.1016/j.xpro.2023.102329


Claude light has only a few minor variations:

- I use a REST API instead of MQTT because it is easier to develop. Specifically, by using flask we can provide a variety of interfaces at different levels of sophistication including a browser interface and API access.
- I use an ethernet cable because the wifi at school is too secure to connect a PicoW and wired so far is more reliable
- I use a Raspberry Pi instead of a PicoW because it has built in Ethernet port, and I find it easier to debug since I can ssh into it and it has a display port. The Pi also enables better logging.
- I use float inputs from 0-1 instead of integers. In the program that runs it, floats are the inputs anyway, and the continuous inputs are easier to introduce in my opinion.
- With the RPi I can use the full Python language which I am more familiar with than MicroPython, and it has more functionality.
- I integrated a camera into part of the interface so you can see what color the LED looks like in a measurement. This might one day lead to a computer vision application of claude-light.


** Some history of this project

I bought two of the devices developed by Baird and Sparks. These are based on PicoW chips and meant to work on wifi. At my home they work great, but the wifi protocol supported is not well-suited to the wifi at CMU.

I tried an Arduino with Arduino Cloud. This worked ok for me, but I learned there is not a way to share the Arduino cloud dashboard with others unless they have an Arduino cloud account too. This also would need a Wifi solution that isn't easy.

I got some Arduinos and Ethernet shields for my CMU office. This was going well until I learned I would probably have to write Arduino code to parse the URL for the query parameters. This is too easy in Python, and unfortunately the UNO boards do not run Micropython, so I abandoned this approach.

I got a Raspberry Pi 5 because it has an ethernet port, and it supports full Python. However, The Pi5 made some changes to their GPIO code and hardware, and it is no longer compatible with Rpi.GPIO, so I was unable to use the GPIO for the RGB LED and make I2C measurements. It is possible there was a fix, but I didn't find it.

Finally, I reverted to a Raspberry Pi 2 where finally everything worked fine. 

I am planning for an upgrade to a Raspberry Pi 4 for the final version. 

* Parts list

In the end there is not that much to this device.

- Raspberry Pi 4 (8GB) https://www.adafruit.com/product/4564
- aluminum metal heat sink with dual fans https://www.adafruit.com/product/4340
- 64GB SD card
- AS7341 color sensor https://www.adafruit.com/product/4698
- RGB LED Module https://www.amazon.com/dp/B0BXKMGSG6
- tall 40 pin extender https://www.adafruit.com/product/1979
- prototype circuit board (small board from https://www.amazon.com/dp/B07NM68FXK)
- Arducam Motorized Focus Pi Camera (https://www.amazon.com/dp/B07SN8GYGD)

You need some wires and soldering tools to put it all together.

All together it looks like this:

[[./claude-air.png]]


* Setting up Claude-light

** Register the MAC address

At CMU it is necessary to do this so you can get an IP address.

** Setup the Raspberry Pi

This is mostly a one time setup on a new Pi. You have to specify a username and password in this process. I recommend running all the updates. You may want to run raspi-config to update it first.

#+BEGIN_SRC sh
sudo apt update && apt full-upgrade && apt clean
#+END_SRC

Maybe this should be done weekly? You can find a script for this at [[./update-pi.sh]].

You have to enable the I2C interface in raspi-config. I also enable ssh.

#+BEGIN_SRC sh
sudo raspi-config
#+END_SRC

Go to interface options, then to I2C to enable it. 

** Setup and activate a virtual environment for Python

I suggest you run this in ~/. Note the --system-site-packages is important if you want to have the camera on.

#+BEGIN_SRC sh
python -m venv --system-site-packages .venv
#+END_SRC

I also recommend add this line to .bashrc so it loads when you login.

#+BEGIN_SRC sh
source ~/.venv/bin/activate
#+END_SRC

If not, you have to manually run this.

** Install claude

The package is only available on GitHUB. Install it like this.

#+BEGIN_SRC sh
pip install git+git://github.com/jkitchin/claude-light
#+END_SRC

Alternatively you can clone and install it locally.

#+BEGIN_SRC sh
git clone git@github.com:jkitchin/claude-light.git
pip install -e claude-pi
#+END_SRC

I think this will install all the dependencies and it should also install a cli called ~claude~ that will start the app. Normally you would only run this on the Raspberry Pi.

You also have to set  up /etc/rc.local to automatically start the server when it boots up. To achieve this, add something like this before the ~exit 0~ line.:

sudo -u jkitchin claude &

It is a little tricky to kill the server. So far I use:

#+BEGIN_SRC sh
pkill claude
#+END_SRC

** Setup claude as a service

It is desirable to setup the Pi so that claude automatically runs when the Pi starts up, and is easy to restart. The best way to do this is with systemd. We have to create a file like this in /etc/systemd/system called claude.service with these contents. You should adapt this file to use the username on the Pi where claude is installed.

#+BEGIN_SRC text :tangle claude.service
[Unit]                                               
Description=Claude Light server
		                                               
[Service]                                          
Type=simple                                       
Restart=always                                         
RestartSec=1                                        
User=jkitchin                                
ExecStart=/home/jkitchin/.venv/bin/claude                           
ExecStop=pkill claude
	                         
[Install]
WantedBy=multi-user.target  
#+END_SRC

I use this script to setup, load and enable the service  [[./setup-service.sh]].

#+BEGIN_SRC sh
sudo systemctl daemon-reload
sudo systemctl enable claude.service
#+END_SRC

This should result in claude starting on bootup, and if it dies, systemd will try to restart it. You can also stop, start, and restart the service.

#+BEGIN_SRC sh
sudo systemctl start claude.service
sudo systemctl stop claude.service
sudo systemctl restart claude.service
#+END_SRC

You can also see the status.

#+BEGIN_SRC sh
sudo systemctl status claude.service
#+END_SRC


** Roadmap
*** TODO https - secure http

*** TODO An MQTT version

*** TODO A bluetooth version 

Claude-light was built specifically for Internet accessibility. A totally local version would be interesting to learn how to build with Bluetooth and a phone bluetooth app.

*** Better camera mount

The camera is somewhat floppy at the moment. It could use a better mount. It is a little tricky to figure out what the best thing to do is though. Maybe a 3-d printed case? or something stiffer that can be bolted down to the PCB.
